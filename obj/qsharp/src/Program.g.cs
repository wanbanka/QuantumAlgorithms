//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Grover\",\"Name\":\"SolveGraphColoringProblem\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":12,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\tseni\\\\Documents\\\\Quantum\\\\Grover\\\\Program.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Grover\",\"Name\":\"SolveGraphColoringProblem\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\tseni\\\\Documents\\\\Quantum\\\\Grover\\\\Program.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"Documentation\":[]}")]
#line hidden
namespace Grover
{
    [SourceLocation("C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs", OperationFunctor.Body, 14, -1)]
    public partial class SolveGraphColoringProblem : Operation<QVoid, QVoid>, ICallable
    {
        public SolveGraphColoringProblem(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "SolveGraphColoringProblem";
        String ICallable.FullName => "Grover.SolveGraphColoringProblem";
        public static EntryPointInfo<QVoid, QVoid> Info => new EntryPointInfo<QVoid, QVoid>(typeof(SolveGraphColoringProblem));
        protected IUnitary<(IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)> MarkValidvertexColoring__
        {
            get;
            set;
        }

        protected IAdjointable<(IAdjointable,IQArray<Qubit>)> ApplyMarkingOracleAsPhaseOracle__
        {
            get;
            set;
        }

        protected ICallable<Int64, Int64> Microsoft__Quantum__Math__FactorialI
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Round
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> Microsoft__Quantum__Math__PI
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Sqrt
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IAdjointable,Int64), QVoid> RunGroversSearch__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> Microsoft__Quantum__Measurement__MultiM
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Measurement__MResetZ
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, IQArray<Boolean>> Microsoft__Quantum__Convert__ResultArrayAsBoolArray
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Chunks
        {
            get;
            set;
        }

        protected ICallable<IQArray<Boolean>, Int64> Microsoft__Quantum__Convert__BoolArrayAsInt
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 15 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
            var nVertices = 8L;
#line 17 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
            var edges = (IQArray<(Int64,Int64)>)new QArray<(Int64,Int64)>((0L, 1L), (0L, 4L), (0L, 5L), (1L, 2L), (1L, 4L), (1L, 5L), (1L, 6L), (2L, 3L), (2L, 5L), (2L, 6L), (2L, 7L), (3L, 6L), (3L, 7L), (4L, 5L), (5L, 6L), (6L, 7L));
#line 24 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
            var markingOracle = MarkValidvertexColoring__.Partial(new Func<(IQArray<Qubit>,Qubit), (IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>((__arg1__) => (edges, __arg1__.Item1, __arg1__.Item2)));
#line 25 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
            var phaseOracle = ApplyMarkingOracleAsPhaseOracle__.Partial(new Func<IQArray<Qubit>, (IAdjointable,IQArray<Qubit>)>((__arg2__) => (markingOracle, __arg2__)));
#line 27 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
            var nQubits = (2L * nVertices);
#line 31 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
            var searchSpaceSize = 2L.Pow(nQubits);
#line 37 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
            var nSolutions = Microsoft__Quantum__Math__FactorialI.Apply(8L);
#line 39 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
            Message__.Apply(String.Format("Length of bit string: {0} qubits", nQubits));
#line 41 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
            Message__.Apply(String.Format("Number of strings: {0} strings", searchSpaceSize));
#line 43 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
            var nIterations = Microsoft__Quantum__Math__Round.Apply(((Microsoft__Quantum__Math__PI.Apply(QVoid.Instance) / 4D) * Microsoft__Quantum__Math__Sqrt.Apply((Microsoft__Quantum__Convert__IntAsDouble.Apply(searchSpaceSize) / Microsoft__Quantum__Convert__IntAsDouble.Apply(nSolutions)))));
#line 45 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
            Message__.Apply(String.Format("Iterations: {0}", nIterations));
#line 47 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
            var answer = new QArray<Boolean>();
#line hidden
            {
#line 49 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                var (register,output) = (Allocate__.Apply(nQubits), Allocate__.Apply());
#line hidden
                bool __arg3__ = true;
                try
                {
#line 51 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                    var isCorrect = false;
#line 53 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                    Message__.Apply("Loading...");
#line 55 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                    while (true)
                    {
#line 56 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                        RunGroversSearch__.Apply((register, phaseOracle, nIterations));
#line 60 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                        var res = (IQArray<Result>)Microsoft__Quantum__Measurement__MultiM.Apply(register);
#line 62 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                        Message__.Apply(String.Format("Result : {0}", res));
#line 66 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                        markingOracle.Apply((register, output));
#line 68 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                        if ((Microsoft__Quantum__Measurement__MResetZ.Apply(output) == Result.One))
                        {
#line 69 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                            isCorrect = true;
#line 72 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                            answer = new QArray<Boolean>(Microsoft__Quantum__Convert__ResultArrayAsBoolArray.Apply(res));
                        }

#line 75 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                        ResetAll__.Apply(register);
                        if (isCorrect)
                        {
                            break;
                        }
                        else
                        {
                        }
                    }

#line 78 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                    var colorBits = (IQArray<IQArray<Boolean>>)Microsoft__Quantum__Arrays__Chunks.Apply<IQArray<IQArray<Boolean>>>((2L, answer?.Copy()));
#line 80 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                    Message__.Apply(String.Format("Color Bits: {0}", colorBits));
#line 82 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                    Message__.Apply("The resulting graph coloring: ");
#line 84 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                    foreach (var i in new QRange(0L, (nVertices - 1L)))
#line hidden
                    {
#line 85 "C:\\Users\\tseni\\Documents\\Quantum\\Grover\\Program.qs"
                        Message__.Apply(String.Format("Vertex {0} : color {1}", i, Microsoft__Quantum__Convert__BoolArrayAsInt.Apply(colorBits[i])));
                    }
                }
#line hidden
                catch
                {
                    __arg3__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg3__)
                    {
#line hidden
                        Release__.Apply(register);
#line hidden
                        Release__.Apply(output);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.MarkValidvertexColoring__ = this.__Factory__.Get<IUnitary<(IQArray<(Int64,Int64)>,IQArray<Qubit>,Qubit)>>(typeof(MarkValidvertexColoring));
            this.ApplyMarkingOracleAsPhaseOracle__ = this.__Factory__.Get<IAdjointable<(IAdjointable,IQArray<Qubit>)>>(typeof(ApplyMarkingOracleAsPhaseOracle));
            this.Microsoft__Quantum__Math__FactorialI = this.__Factory__.Get<ICallable<Int64, Int64>>(typeof(global::Microsoft.Quantum.Math.FactorialI));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.Microsoft__Quantum__Math__Round = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Round));
            this.Microsoft__Quantum__Math__PI = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
            this.Microsoft__Quantum__Math__Sqrt = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Sqrt));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.RunGroversSearch__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IAdjointable,Int64), QVoid>>(typeof(RunGroversSearch));
            this.Microsoft__Quantum__Measurement__MultiM = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(global::Microsoft.Quantum.Measurement.MultiM));
            this.Microsoft__Quantum__Measurement__MResetZ = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Measurement.MResetZ));
            this.Microsoft__Quantum__Convert__ResultArrayAsBoolArray = this.__Factory__.Get<ICallable<IQArray<Result>, IQArray<Boolean>>>(typeof(global::Microsoft.Quantum.Convert.ResultArrayAsBoolArray));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
            this.Microsoft__Quantum__Arrays__Chunks = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Chunks<>));
            this.Microsoft__Quantum__Convert__BoolArrayAsInt = this.__Factory__.Get<ICallable<IQArray<Boolean>, Int64>>(typeof(global::Microsoft.Quantum.Convert.BoolArrayAsInt));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<SolveGraphColoringProblem, QVoid, QVoid>(QVoid.Instance);
        }
    }
}